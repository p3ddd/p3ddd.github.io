<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on 的啊达</title><link>https://petrichor.net.cn/tags/go/</link><description>Recent content in Go on 的啊达</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 30 Apr 2022 10:05:56 +0800</lastBuildDate><atom:link href="https://petrichor.net.cn/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Benchmark</title><link>https://petrichor.net.cn/p/go-benchmark/</link><pubDate>Sat, 30 Apr 2022 10:05:56 +0800</pubDate><guid>https://petrichor.net.cn/p/go-benchmark/</guid><description>&lt;p>安装&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">go install github.com/cnlh/benchmark@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>测试程序&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;github.com/gin-gonic/gin&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">New&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GET&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;/ping&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">gin&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ctx&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">200&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;pong&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">r&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Run&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;:8000&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&amp;gt; benchmark.exe -c &lt;span class="m">3000&lt;/span> -n &lt;span class="m">100000&lt;/span> http://127.0.0.1:8000/ping
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Running &lt;span class="m">100000&lt;/span> &lt;span class="nb">test&lt;/span> @ 127.0.0.1:8000 by &lt;span class="m">3000&lt;/span> connections
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Request as following format:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">GET /ping HTTP/1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Host: 127.0.0.1:8000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Requests/sec: 44579.28
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Transfer/sec: 7.25MB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Error&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span> : &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Percentage of the requests served within a certain &lt;span class="nb">time&lt;/span> &lt;span class="o">(&lt;/span>ms&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 50% &lt;span class="m">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 65% &lt;span class="m">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 75% &lt;span class="m">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 80% &lt;span class="m">8&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 90% &lt;span class="m">11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 95% &lt;span class="m">14&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 98% &lt;span class="m">24&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 99% &lt;span class="m">128&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 100% &lt;span class="m">833&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>使用 Drone CI 自动部署 Go 应用</title><link>https://petrichor.net.cn/p/drone-gitea-golang/</link><pubDate>Fri, 08 Apr 2022 15:16:18 +0800</pubDate><guid>https://petrichor.net.cn/p/drone-gitea-golang/</guid><description>&lt;p>本文将记录如何使用 Drone 自动部署 Go 应用。&lt;/p>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;h3 id="drone-ci">Drone CI&lt;/h3>
&lt;p>官网介绍：&lt;/p>
&lt;blockquote>
&lt;p>Automate Software Build and Testing&lt;/p>
&lt;p>Drone is a &lt;strong>self-service Continuous Delivery platform&lt;/strong> for busy development teams.&lt;/p>
&lt;/blockquote>
&lt;h3 id="gitea">Gitea&lt;/h3>
&lt;p>官网介绍：&lt;/p>
&lt;blockquote>
&lt;p>Gitea 是一个自己托管的Git服务程序。他和GitHub, Bitbucket or Gitlab等比较类似。他是从 Gogs 发展而来，不过我们已经Fork并且命名为Gitea。&lt;/p>
&lt;p>Gitea的首要目标是创建一个极易安装，运行非常快速，安装和使用体验良好的自建 Git 服务。我们采用Go作为后端语言，这使我们只要生成一个可执行程序即可。并且他还支持跨平台，支持 Linux, macOS 和 Windows 以及各种架构，除了x86，amd64，还包括 ARM 和 PowerPC。&lt;/p>
&lt;/blockquote>
&lt;h3 id="自动部署流程">自动部署流程&lt;/h3>
&lt;ol>
&lt;li>项目中写入 .drone.yml 配置文件，push 到 gitea 中&lt;/li>
&lt;li>gitea 通过钩子函数告诉 drone&lt;/li>
&lt;li>drone 读取配置文件，通过 drone-runner-* 部署项目&lt;/li>
&lt;/ol>
&lt;h2 id="安装">安装&lt;/h2>
&lt;h3 id="安装-drone-server-和-drone-runner-docker">安装 drone-server 和 drone-runner-docker&lt;/h3>
&lt;p>这里使用 &lt;code>docker-compose&lt;/code> 安装。&lt;/p>
&lt;p>在 &lt;code>docker-compose&lt;/code> 所在目录使用 &lt;code>docker-compose up -d&lt;/code> 安装。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;3&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 容器名称&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">drone-server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 构建所使用的镜像&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">drone/drone:1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 映射容器内80端口到宿主机的7079端口&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">7079&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 映射容器内/data目录到宿主机的/data/drone目录&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">/data/drone:/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 容器随docker自动启动&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Gitea 服务器地址&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_GITEA_SERVER=http://ip:port&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Gitea OAuth2客户端ID&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_GITEA_CLIENT_ID=XXX&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Gitea OAuth2客户端密钥&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_GITEA_CLIENT_SECRET=yyy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c">#- DRONE_GIT_ALWAYS_AUTH=&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># drone的共享密钥&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_RPC_SECRET=drone_rpc_secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># drone的主机名&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_SERVER_HOST=ip:port&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 外部协议方案&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_SERVER_PROTO=http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 创建管理员账户，这里对应为gitea的用户名&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_USER_CREATE=username:admin,admin:true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">drone-runner-docker&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">drone/drone-runner-docker:1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">7080&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">3000&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restart&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">drone-server&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">/var/run/docker.sock:/var/run/docker.sock&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 用于连接到Drone服务器的协议。该值必须是http或https。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_RPC_PROTO=http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 用于连接到Drone服务器的主机名&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_RPC_HOST=ip:port&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># Drone服务器进行身份验证的共享密钥，和上面设置一样&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_RPC_SECRET=drone_rpc_secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 限制运行程序可以执行的并发管道数。运行程序默认情况下执行2个并发管道。&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_RUNNER_CAPACITY=2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># docker runner 名称&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">DRONE_RUNNER_NAME=drone-runner&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="安装-drone-runner-exec">安装 drone-runner-exec&lt;/h3>
&lt;h4 id="下载">下载&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">curl -L https://github.com/drone-runners/drone-runner-exec/releases/latest/download/drone_runner_exec_linux_amd64.tar.gz &lt;span class="p">|&lt;/span> tar zx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo install -t /usr/local/bin drone-runner-exec
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="配置">配置&lt;/h4>
&lt;p>配置文件为 &lt;code>/etc/drone-runner-exec/config&lt;/code> ，需要手动创建并写入一下内容。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-ini" data-lang="ini">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 用于连接到Drone服务器的协议。该值必须是http或https&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">DRONE_RPC_PROTO&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">http&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 用于连接到Drone服务器的主机名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">DRONE_RPC_HOST&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">ip:port&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Drone服务器进行身份验证的共享密钥，和上面设置一样&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">DRONE_RPC_SECRET&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">drone_rpc_secret&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># log 存储目录，需要自行建立&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">DRONE_LOG_FILE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/opt/drone/drone-runner-exec/log.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 限制运行程序可以执行的并发管道数。运行程序默认情况下执行2个并发管道&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># limits the number of concurrent pipelines that a runner can execute&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">DRONE_RUNNER_CAPACITY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">DRONE_RUNNER_NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">drone-runner-exec&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">DRONE_RUNNER_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">/bin:/usr/local/go/bin:/usr/local/bin:/usr/bin:/usr/sbin:/sbin # sets the PATH variable for all pipeline steps&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 日志追踪&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="na">DRONE_TRACE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="启动">启动&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">drone-runner-exec service install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">drone-runner-exec service start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tail /opt/drone/drone-runner-exec/log.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>➜&lt;/strong> &lt;strong>drone-runner-exec&lt;/strong> drone-runner-exec service install&lt;/p>
&lt;p>read configuration /home/ubuntu/.drone-runner-exec/config&lt;/p>
&lt;p>installing service drone-runner-exec&lt;/p>
&lt;p>drone-runner-exec: error: cannot read configuration, try &amp;ndash;help&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;/blockquote>
&lt;h2 id="项目配置文件-droneyml">项目配置文件 .drone.yml&lt;/h2>
&lt;h3 id="在宿主机执行命令编译并运行">在宿主机执行命令，编译并运行&lt;/h3>
&lt;p>如果项目根目录中有 &lt;code>.drone.yml&lt;/code> 文件，drone 就可以读取文件中的内容，从而进行自动部署。&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pipeline&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 对象类型，有 pipeline、secret 和 signature 等类型&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">exec&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 流水线类型，有 docker、kubernetes、exec、ssh 等类型&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">drone-golang-example&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">platform&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">os&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">linux&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">arch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">amd64&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test &amp;amp; build&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">environment&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">GOOS&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">linux&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">GOARCH&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">amd64&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">CGO_ENABLED&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">commands&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">whoami&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;==== test ====&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">go test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;==== build ====&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">go build -o server&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">copy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">commands&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">cp -rf ./server /opt/drone-golang-example/server&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">chown ubuntu:ubuntu /opt/drone-golang-example/server&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">chmod 755 /opt/drone-golang-example/server&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">stop&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">commands&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">sh scripts/stop.sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">run&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">commands&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;==== run ====&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">cd /opt/drone-golang-example&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">nohup ./server 2&amp;gt;&amp;amp;1 &amp;gt; web.log &amp;amp;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;running&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">notify&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">commands&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">echo &amp;#34;failure&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">when&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">failure&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">trigger&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">branch&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">main&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">event&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">push&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>其中 &lt;code>stop.sh&lt;/code> 内容为：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#! /bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># NR==1 第一行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># print $2 输出第二个参数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>sudo lsof -i:7007&lt;span class="p">|&lt;/span>grep drone-golang-example&lt;span class="p">|&lt;/span>awk &lt;span class="s1">&amp;#39;NR==1{print $2}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> ! &lt;span class="si">${&lt;/span>&lt;span class="nv">id&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;项目未启动&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sudo &lt;span class="nb">kill&lt;/span> -9 &lt;span class="nv">$id&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="在-docker-中运行">在 Docker 中运行&lt;/h3>
&lt;p>TODO&lt;/p>
&lt;h2 id="注意">注意&lt;/h2>
&lt;h3 id="pending">Pending&lt;/h3>
&lt;p>没有对应的 runner，需要哪个就安装哪个，对应 &lt;code>.drone.yml&lt;/code> 中的 type，本文需要安装 &lt;a class="link" href="#drone-runner-exec" >⬆️drone-runner-exec&lt;/a> 。&lt;/p>
&lt;h3 id="fatal-could-not-read-username-for-httpipport-terminal-prompts-disabled">fatal: could not read Username for &lt;code>'http://ip:port'&lt;/code>: terminal prompts disabled&lt;/h3>
&lt;p>需要用户名等，这里发现仓库设置为了私有，改为公开，不再报此错误。&lt;/p>
&lt;p>若需要使用私有仓库，参考一下&lt;a class="link" href="https://www.codenong.com/cs106797930/" target="_blank" rel="noopener"
>这篇文章&lt;/a>。&lt;/p>
&lt;h3 id="command-not-found">command not found&lt;/h3>
&lt;p>如：&lt;/p>
&lt;ul>
&lt;li>go: command not found&lt;/li>
&lt;li>scripts/stop.sh: line 3: grep: command not found&lt;/li>
&lt;/ul>
&lt;p>在配置文件中修改配置项 &lt;code>DRONE_RUNNER_PATH&lt;/code> ，需要的命令在哪个路径就加什么。&lt;/p>
&lt;p>或者也可以将 &lt;code>.drone.yml&lt;/code> 中的 go 改为绝对路径，比如我这里是 &lt;code>/usr/local/go/bin/go&lt;/code> (不推荐)。&lt;/p>
&lt;h3 id="no-such-process">No such process&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>旧：脚本使用 ps 查找进程&lt;/p>
&lt;p>第一次运行时，并没有已经运行的进程去停止，可以先把 &lt;code>.drone.yml&lt;/code> 中 stop 这一步去掉。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新：脚本使用 lsof 查找进程&lt;/p>
&lt;p>未启动会输出项目未启动。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="某一阶段run一直显示-running-不停止">某一阶段(run)一直显示 Running 不停止&lt;/h3>
&lt;p>。。。&lt;/p>
&lt;h2 id="reference">Reference&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://fix.moe/post/start-drone-ci" target="_blank" rel="noopener"
>https://fix.moe/post/start-drone-ci&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://docs.drone.io" target="_blank" rel="noopener"
>https://docs.drone.io&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>『Go』一些有意思的代码写法</title><link>https://petrichor.net.cn/p/go-some-interesting-code/</link><pubDate>Wed, 02 Feb 2022 14:59:25 +0800</pubDate><guid>https://petrichor.net.cn/p/go-some-interesting-code/</guid><description>&lt;h2 id="函数的不定参">函数的不定参&lt;/h2>
&lt;p>新亮笔记、gRPC、kratos、&lt;a class="link" href="https://github.com/schollz/progressbar" target="_blank" rel="noopener"
>progressbar&lt;/a> 等项目都大量用到了这个写法。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Logger&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Option&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">option&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">level&lt;/span> &lt;span class="nx">Level&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fields&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">file&lt;/span> &lt;span class="nx">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Writer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">timeLayout&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">disableConsole&lt;/span> &lt;span class="kt">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">NewLogger&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">opts&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="nx">Option&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">Logger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">logger&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="nx">_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">f&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">range&lt;/span> &lt;span class="nx">opts&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">opt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">logger&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">XXX&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">logger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">WithErrorLevel&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">Option&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">opt&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">opt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">level&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">ErrorLevel&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">WithField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">value&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Option&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kd">func&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">opt&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">option&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">opt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">fields&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">key&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>使用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">logger&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nf">NewLogger&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">WithField&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;key&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;value&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样写有一个好处，后续新增其他参数时，也很方便配置。&lt;/p>
&lt;h2 id="接口相关">接口相关&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="nx">Student&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">student&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 一
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Student&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">i&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 二
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">Study&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">student&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Name&lt;/span> &lt;span class="kt">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="第一种">第一种&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="nx">Student&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">student&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>强制 &lt;code>*student&lt;/code> 去实现 &lt;code>Student&lt;/code> 接口，编译器会进行检查。&lt;/p>
&lt;p>如果没有实现呢，编译器就会报错：&lt;/p>
&lt;blockquote>
&lt;p>panic: runtime error: invalid memory address or nil pointer dereference&lt;/p>
&lt;/blockquote>
&lt;p>如果去掉那一行强制检查，就不会报错了。&lt;/p>
&lt;h3 id="第二种">第二种&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">i&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这也是一种很巧妙的写法，强制 &lt;code>Student&lt;/code> 接口中的方法只能在本包中实现，因为有这个首字母小写的方法，其他包是不能实现的。这里的方法名只要是首字母小写就可以。&lt;/p></description></item><item><title>『Go』const常量与内联函数</title><link>https://petrichor.net.cn/p/go-const-inline/</link><pubDate>Fri, 12 Nov 2021 14:03:19 +0800</pubDate><guid>https://petrichor.net.cn/p/go-const-inline/</guid><description>&lt;p>我想定义一个像这样的常量：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">const&lt;/span> &lt;span class="nx">Code&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kd">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">string&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="kd">interface&lt;/span>&lt;span class="p">{}{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;123&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;456&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>发现报错了：&lt;/p>
&lt;blockquote>
&lt;p>Const initializer &amp;lsquo;map[string]interface{}{&amp;hellip;}&amp;rsquo; is not a constant&lt;/p>
&lt;/blockquote>
&lt;p>而当我这样定义时：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">const&lt;/span> &lt;span class="nx">Len&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;qwe&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">const&lt;/span> &lt;span class="nx">Len2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;qwe&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//length(&amp;#34;qwe&amp;#34;) (value of type int) is not constant
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>发现 &lt;code>Len&lt;/code> 不会报错，而 &lt;code>Len2&lt;/code> 却会报错。那 Golang 中什么才可以定义为常量呢？&lt;/p>
&lt;p>原来 Golang 中的常量是编译期常量，在编译时就会完全确定取值，并且只能是&lt;strong>布尔型&lt;/strong>、&lt;strong>数字型（整数型、浮点型和复数）&lt;strong>和&lt;/strong>字符串型&lt;/strong>&lt;/p>
&lt;p>所以不能将函数的返回值赋给常量(函数调用发生在运行时期)，文章开头的 &lt;code>map&lt;/code> 也不能定义为常量&lt;/p>
&lt;p>相比之下，&lt;strong>Java&lt;/strong> 中声明为 &lt;code>final&lt;/code> 类型的基本类型或声明为 &lt;code>String&lt;/code> 类型并直接赋值(非运算)的变量和 &lt;strong>JavaScript&lt;/strong> 中的 &lt;code>const&lt;/code> 代表的是一次性赋值的变量，本质上还是变量，只是不允许再做修改&lt;/p>
&lt;p>{% note tip tip %}
这里可以用锁
{% endnote %}&lt;/p>
&lt;p>可是 &lt;code>len()&lt;/code> 为什么可以呢，难道这个函数就不是函数了吗？&lt;/p>
&lt;p>一番搜索后我看到了一个词：&lt;strong>内联函数&lt;/strong>&lt;/p>
&lt;h2 id="内联函数">内联函数&lt;/h2>
&lt;p>什么是内联函数&lt;/p>
&lt;p>{% note info 内联函数 %}&lt;/p>
&lt;p>在计算机科学中，&lt;strong>内联函数&lt;/strong>（有时称作&lt;strong>在线函数&lt;/strong>或&lt;strong>编译时期展开函数&lt;/strong>）是一种编程语言结构，用来建议编译器对一些特殊函数进行内联扩展（有时称作&lt;strong>在线扩展&lt;/strong>）。&lt;/p>
&lt;blockquote>
&lt;p>引自&lt;a class="link" href="https://baike.baidu.com/item/%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/9567625" target="_blank" rel="noopener"
>内联函数_百度百科&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>{% endnote %}&lt;/p>
&lt;p>原来 &lt;code>len()&lt;/code> 是一个内联函数，既然他是&lt;strong>编译时期展开函数&lt;/strong>，那就没问题了&lt;/p>
&lt;p>学过 C 语言的应该对内联函数不陌生，在 C 语言中有一个关键字 &lt;strong>&lt;code>inline&lt;/code>&lt;/strong> ， 使用 &lt;strong>&lt;code>inline&lt;/code>&lt;/strong> 修饰的函数就是内联函数。比如：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kr">inline&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这段代码中 &lt;code>int add(int a, int b)&lt;/code> 使用了 &lt;code>inline&lt;/code> 进行修饰，那代码在执行的时候就会变成下面这样：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样可以避免频繁调用函数时栈内存重复开辟所带来的消耗，一般用于这种能够快速执行的短小的函数，因为在这种情况下函数调用的时间消耗显得更为突出&lt;/p>
&lt;hr>
&lt;p>我们再来运行一下这段代码&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">const&lt;/span> &lt;span class="nx">Len&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;qwe&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">const&lt;/span> &lt;span class="nx">hello&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">len&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">length&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;qwe&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">hello&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行 &lt;code>go run --gcflags=-m .\main.go&lt;/code> ，输出如下：&lt;/p>
&lt;blockquote>
&lt;p>&lt;code># command-line-arguments&lt;/code>
.\main.go:8:6: can inline length
.\main.go:13:20: inlining call to length &lt;br>
.\main.go:13:13: inlining call to fmt.Println
.\main.go:14:13: inlining call to fmt.Println
.\main.go:8:13: a does not escape
.\main.go:13:20: length(&amp;ldquo;qwe&amp;rdquo;) escapes to heap
.\main.go:13:13: []interface {}{&amp;hellip;} does not escape
.\main.go:14:13: hello escapes to heap
.\main.go:14:13: []interface {}{&amp;hellip;} does not escape
&lt;!-- raw HTML omitted -->:1: .this does not escape
&lt;!-- raw HTML omitted -->:1: .this does not escape
3
Hello World&lt;/p>
&lt;/blockquote>
&lt;p>可以看到，&lt;code>length&lt;/code> 可以作为内联函数，&lt;code>main&lt;/code> 不可以，而 &lt;code>fmt.Println&lt;/code> 也是一个内联函数。我们再来这样跑一下：&lt;code>go run --gcflags=&amp;quot;-m -m&amp;quot; .\main.go&lt;/code> ，注意中间加了一个 &lt;code>-m&lt;/code> ，得到输出如下，可以看到更详细地信息，也可以看到 &lt;code>fmt.Println&lt;/code> 与 &lt;code>length&lt;/code> 都被展开为了怎样的形式：&lt;/p>
&lt;p>{% fold %}&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>#command-line-arguments&lt;/code>
.\main.go:8:6: can inline length with cost 3 as: func(string) int { return len(a) }
.\main.go:12:6: cannot inline main: function too complex: cost 157 exceeds budget 80
.\main.go:13:20: inlining call to length func(string) int { return len(a) }
.\main.go:13:13: inlining call to fmt.Println func(&amp;hellip;interface {}) (int, error) { var fmt..autotmp_3 int; fmt..autotmp_3 = &lt;!-- raw HTML omitted -->; var fmt..autotmp_4 error; fmt..autotmp_4 = &lt;!-- raw HTML omitted -->; fmt..autotmp_3, fmt..autotmp_4 = fmt.Fprintln(io.Writer(os.Stdout), fmt.a&amp;hellip;); return fmt..autotmp_3, fmt..autotmp_4 }
.\main.go:14:13: inlining call to fmt.Println func(&amp;hellip;interface {}) (int, error) { var fmt..autotmp_3 int; fmt..autotmp_3 = &lt;!-- raw HTML omitted -->; var fmt..autotmp_4 error; fmt..autotmp_4 = &lt;!-- raw HTML omitted -->; fmt..autotmp_3, fmt..autotmp_4 = fmt.Fprintln(io.Writer(os.Stdout), fmt.a&amp;hellip;); return fmt..autotmp_3, fmt..autotmp_4 }
.\main.go:8:13: a does not escape
.\main.go:14:13: hello escapes to heap:
.\main.go:14:13: flow: ~arg0 = &amp;amp;{storage for hello}:
.\main.go:14:13: from hello (spill) at .\main.go:14:13
.\main.go:14:13: from ~arg0 := hello (assign-pair) at .\main.go:14:13
.\main.go:14:13: flow: {storage for []interface {}{&amp;hellip;}} = ~arg0:
.\main.go:14:13: from []interface {}{&amp;hellip;} (slice-literal-element) at .\main.go:14:13
.\main.go:14:13: flow: fmt.a = &amp;amp;{storage for []interface {}{&amp;hellip;}}:
.\main.go:14:13: from []interface {}{&amp;hellip;} (spill) at .\main.go:14:13
.\main.go:14:13: from fmt.a = []interface {}{&amp;hellip;} (assign) at .\main.go:14:13
.\main.go:14:13: flow: {heap} = *fmt.a:
.\main.go:14:13: from fmt.Fprintln(io.Writer(os.Stdout), fmt.a&amp;hellip;) (call parameter) at .\main.go:14:13
.\main.go:13:20: length(&amp;ldquo;qwe&amp;rdquo;) escapes to heap:
.\main.go:13:20: flow: ~arg0 = &amp;amp;{storage for length(&amp;ldquo;qwe&amp;rdquo;)}:
.\main.go:13:20: from length(&amp;ldquo;qwe&amp;rdquo;) (spill) at .\main.go:13:20
.\main.go:13:20: from ~arg0 := length(&amp;ldquo;qwe&amp;rdquo;) (assign-pair) at .\main.go:13:13
.\main.go:13:20: flow: {storage for []interface {}{&amp;hellip;}} = ~arg0:
.\main.go:13:20: from []interface {}{&amp;hellip;} (slice-literal-element) at .\main.go:13:13
.\main.go:13:20: flow: fmt.a = &amp;amp;{storage for []interface {}{&amp;hellip;}}:
.\main.go:13:20: from []interface {}{&amp;hellip;} (spill) at .\main.go:13:13
.\main.go:13:20: from fmt.a = []interface {}{&amp;hellip;} (assign) at .\main.go:13:13
.\main.go:13:20: flow: {heap} = *fmt.a:
.\main.go:13:20: from fmt.Fprintln(io.Writer(os.Stdout), fmt.a&amp;hellip;) (call parameter) at .\main.go:13:13
.\main.go:13:20: length(&amp;ldquo;qwe&amp;rdquo;) escapes to heap
.\main.go:13:13: []interface {}{&amp;hellip;} does not escape
.\main.go:14:13: hello escapes to heap
.\main.go:14:13: []interface {}{&amp;hellip;} does not escape
&lt;!-- raw HTML omitted -->:1: .this does not escape
&lt;!-- raw HTML omitted -->:1: .this does not escape
3
Hello World&lt;/p>
&lt;/blockquote>
&lt;p>{% endfold %}&lt;/p>
&lt;h2 id="无类型常量">无类型常量&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-golang" data-lang="golang">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">const&lt;/span> &lt;span class="nx">hello&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello World&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//const hello untyped string = &amp;#34;Hello World&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我们发现，当我们这样定义一个字符串常量时，它的类型是 &lt;code>untyped string&lt;/code>&lt;/p>
&lt;p>原来 Go 中有六种未明确类型的常量类型，分别是&lt;/p>
&lt;ul>
&lt;li>无类型的布尔型&lt;/li>
&lt;li>无类型的整形&lt;/li>
&lt;li>无类型的字符型&lt;/li>
&lt;li>无类型的浮点型&lt;/li>
&lt;li>无类型的复数&lt;/li>
&lt;li>无类型的字符串&lt;/li>
&lt;/ul>
&lt;p>编译器会为这些没有明确基础类型的常量提供比基础类型更高精度的算术运算，赋值给特定类型时会有影响&lt;/p></description></item><item><title>Go Test 单元测试简明教程</title><link>https://petrichor.net.cn/p/go-test/</link><pubDate>Sat, 07 Aug 2021 22:06:42 +0800</pubDate><guid>https://petrichor.net.cn/p/go-test/</guid><description>&lt;h2 id="特征">特征&lt;/h2>
&lt;p>Golang 单元测试对文件名和方法名，参数都有很严格的要求。例如：&lt;/p>
&lt;ul>
&lt;li>文件名必须以 _test.go 结尾&lt;/li>
&lt;li>方法名必须是 Test 开头&lt;/li>
&lt;li>方法参数必须是 t *testing.T 或 b *testing.B&lt;/li>
&lt;/ul>
&lt;h2 id="命令详解">命令详解&lt;/h2>
&lt;p>go test 是 go 语言自带的测试工具，其中包含的是两类，单元测试(即 功能测试) 和 性能测试&lt;/p>
&lt;p>通过 &lt;code>go help test&lt;/code> 可以看到 go test 的使用说明：&lt;/p>
&lt;h3 id="格式">格式：&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-mysql" data-lang="mysql">&lt;span class="line">&lt;span class="cl">&lt;span class="n">go&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">packages&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">flags&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">``&lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">`&lt;/span>&lt;span class="n">test&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">binary&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="参数">参数：&lt;/h3>
&lt;p>-c : 编译 go test 成为可执行的二进制文件，但是不运行测试。&lt;/p>
&lt;p>-i : 安装测试包依赖的 package，但是不运行测试。&lt;/p>
&lt;p>关于 build flags，调用 &lt;code>go help build&lt;/code>，这些是编译运行过程中需要使用到的参数，一般设置为空&lt;/p>
&lt;p>关于 packages，调用 &lt;code>go help packages&lt;/code>，这些是关于包的管理，一般设置为空&lt;/p>
&lt;p>关于 flags for test binary，调用 &lt;code>go help testflag&lt;/code>，这些是 go test 过程中经常使用到的参数：&lt;/p>
&lt;p>-test.v : 是否输出全部的单元测试用例（不管成功或者失败），默认没有加上，所以只输出失败的单元测试用例&lt;/p>
&lt;p>-test.run pattern : 只跑哪些单元测试用例&lt;/p>
&lt;p>-test.bench patten : 只跑那些性能测试用例&lt;/p>
&lt;p>-test.benchmem : 是否在性能测试的时候输出内存情况&lt;/p>
&lt;p>-test.benchtime t : 性能测试运行的时间，默认是1s&lt;/p>
&lt;p>-test.cpuprofile cpu.out : 是否输出cpu性能分析文件&lt;/p>
&lt;p>-test.memprofile mem.out : 是否输出内存性能分析文件&lt;/p>
&lt;p>-test.blockprofile block.out : 是否输出内部goroutine阻塞的性能分析文件&lt;/p>
&lt;p>-test.memprofilerate n : 内存性能分析的时候有一个分配了多少的时候才打点记录的问题。这个参数就是设置打点的内存分配间隔，也就是 profile 中一个 sample 代表的内存大小。默认是设置为 512 * 1024 的。如果你将它设置为 1，则每分配一个内存块就会在 profile 中有个打点，那么生成的 profile 的 sample 就会非常多。如果你设置为 0，那就是不做打点了&lt;/p>
&lt;p>你可以通过设置 memprofilerate=1 和 GOGC=off 来关闭内存回收，并且对每个内存块的分配进行观察&lt;/p>
&lt;p>-test.blockprofilerate n : 基本同上，控制的是 goroutine 阻塞时候打点的纳秒数。默认不设置就相当于 -test.blockprofilerate=1，每一纳秒都打点记录一下&lt;/p>
&lt;p>-test.parallel n : 性能测试的程序并行 cpu 数，默认等于 GOMAXPROCS&lt;/p>
&lt;p>-test.timeout t : 如果测试用例运行时间超过 t，则抛出 panic&lt;/p>
&lt;p>-test.cpu 1,2,4 : 程序运行在哪些 CPU 上面，使用二进制的 1 所在位代表，和 nginx 的 nginx_worker_cpu_affinity 是一个道理&lt;/p>
&lt;p>-test.short : 将那些运行时间较长的测试用例运行时间缩短&lt;/p></description></item><item><title>『Go』语言基础</title><link>https://petrichor.net.cn/p/go/</link><pubDate>Sat, 07 Aug 2021 22:06:41 +0800</pubDate><guid>https://petrichor.net.cn/p/go/</guid><description>&lt;img src="https://petrichor.net.cn/go.png" alt="Featured image of post 『Go』语言基础" />&lt;h2 id="语言基础">语言基础&lt;/h2>
&lt;h3 id="main函数">main函数&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>main函数不能带参数&lt;/p>
&lt;/li>
&lt;li>
&lt;p>main函数不能定义返回值&lt;/p>
&lt;/li>
&lt;li>
&lt;p>main函数所在的包必须为main&lt;/p>
&lt;/li>
&lt;li>
&lt;p>main函数中可以使用flag包来获取和解析命令行参数&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="go程序的执行启动顺序">Go程序的执行（启动）顺序&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>按顺序导入所有被 main 包引用的其它包，然后在每个包中执行如下流程：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果该包又导入了其它的包，则从第一步开始递归执行，但是每个包只会被导入一次。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后以相反的顺序在每个包中初始化常量和变量，如果该包含有 init 函数的话，则调用该函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在完成这一切之后，main 也执行同样的过程，最后调用 main 函数开始执行程序。
包/package&lt;/p>
&lt;p>注意包级别的常量名和函数等都是以大写字母开头,它们才可以像tempconv.AbZeroC这样被外部代码访问。&lt;/p>
&lt;p>除了包的导入路径,每个包还有一个包名,包名一般是短小的名字(并不要求包名是唯一的),包名在包的声明处指定。按照惯例,一个包的名字和包的导入路径的最后一个字段相同，故这里是tempconv。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="命名规范">命名规范&lt;/h2>
&lt;h3 id="package名字">package名字&lt;/h3>
&lt;ul>
&lt;li>保持package的名字和目录保持一致&lt;/li>
&lt;li>尽量采取有意义的包名，简短，有意义&lt;/li>
&lt;li>尽量和标准库不要冲突。&lt;/li>
&lt;/ul>
&lt;h3 id="文件命名">文件命名&lt;/h3>
&lt;h3 id="import规范">import规范&lt;/h3>
&lt;ul>
&lt;li>单包引入&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>多包引入，每个包独占一行，按首字母排序（一般由ide来完成）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;context&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;log&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;net/http&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="常量声明">常量声明&lt;/h3>
&lt;h3 id="变量声明">变量声明&lt;/h3>
&lt;h3 id="函数声明">函数声明&lt;/h3>
&lt;h3 id="结构体声明">结构体声明&lt;/h3>
&lt;h3 id="接口命名">接口命名&lt;/h3>
&lt;h2 id="占位符">占位符&lt;/h2>
&lt;h3 id="普通占位符">普通占位符&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">%v&lt;/td>
&lt;td style="text-align:center">相应值的默认格式。&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%v&amp;quot;, people)&lt;/td>
&lt;td style="text-align:center">{zhangsan}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%+v&lt;/td>
&lt;td style="text-align:center">打印结构体时，会添加字段名&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%+v&amp;quot;, people)&lt;/td>
&lt;td style="text-align:center">{Name:zhangsan}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%#v&lt;/td>
&lt;td style="text-align:center">相应值的Go语法表示&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;#v&amp;quot;, people)&lt;/td>
&lt;td style="text-align:center">main.Human{Name:&amp;ldquo;zhangsan&amp;rdquo;}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%T&lt;/td>
&lt;td style="text-align:center">相应值的类型的Go语法表示&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%T&amp;quot;, people)&lt;/td>
&lt;td style="text-align:center">main.Human&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%%&lt;/td>
&lt;td style="text-align:center">字面上的百分号，并非值的占位符&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%%&amp;quot;)&lt;/td>
&lt;td style="text-align:center">%&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="布尔占位符">布尔占位符&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">%t&lt;/td>
&lt;td style="text-align:center">true 或 false&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%t&amp;quot;, true)&lt;/td>
&lt;td style="text-align:center">true&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="整数占位符">整数占位符&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">%b&lt;/td>
&lt;td style="text-align:center">二进制表示&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%b&amp;quot;, 5)&lt;/td>
&lt;td style="text-align:center">101&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%c&lt;/td>
&lt;td style="text-align:center">相应Unicode码点所表示的字符&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%c&amp;quot;, 0x4E2D)&lt;/td>
&lt;td style="text-align:center">中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%d&lt;/td>
&lt;td style="text-align:center">十进制表示&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%d&amp;quot;, 0x12)&lt;/td>
&lt;td style="text-align:center">18&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%o&lt;/td>
&lt;td style="text-align:center">八进制表示&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%d&amp;quot;, 10)&lt;/td>
&lt;td style="text-align:center">12&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%q&lt;/td>
&lt;td style="text-align:center">单引号围绕的字符字面值，由Go语法安全地转义&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%q&amp;quot;, 0x4E2D)&lt;/td>
&lt;td style="text-align:center">&amp;lsquo;中&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%x&lt;/td>
&lt;td style="text-align:center">十六进制表示，字母形式为小写 a-f&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%x&amp;quot;, 13)&lt;/td>
&lt;td style="text-align:center">d&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%X&lt;/td>
&lt;td style="text-align:center">十六进制表示，字母形式为大写 A-F&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%x&amp;quot;, 13)&lt;/td>
&lt;td style="text-align:center">D&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%U&lt;/td>
&lt;td style="text-align:center">Unicode格式：U+1234，等同于 &amp;ldquo;U+%04X&amp;rdquo;&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%U&amp;quot;, 0x4E2D)&lt;/td>
&lt;td style="text-align:center">U+4E2D&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="浮点数和复数的组成部分实部和虚部">浮点数和复数的组成部分（实部和虚部）&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">%b&lt;/td>
&lt;td style="text-align:center">无小数部分的，指数为二的幂的科学计数法， 与 strconv.FormatFloat 的 &amp;lsquo;b&amp;rsquo; 转换格式一致。例如 -123456p-78&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%e&lt;/td>
&lt;td style="text-align:center">科学计数法，例如 -1234.456e+78&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%e&amp;quot;, 10.2)&lt;/td>
&lt;td style="text-align:center">1.020000e+01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%E&lt;/td>
&lt;td style="text-align:center">科学计数法，例如 -1234.456E+78&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%e&amp;quot;, 10.2)&lt;/td>
&lt;td style="text-align:center">1.020000E+01&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%f&lt;/td>
&lt;td style="text-align:center">有小数点而无指数，例如 123.456&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%f&amp;quot;, 10.2)&lt;/td>
&lt;td style="text-align:center">10.200000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%g&lt;/td>
&lt;td style="text-align:center">根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%g&amp;quot;, 10.20)&lt;/td>
&lt;td style="text-align:center">10.2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%G&lt;/td>
&lt;td style="text-align:center">根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%G&amp;quot;, 10.20+2i)&lt;/td>
&lt;td style="text-align:center">(10.2+2i)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="字符串与字节切片">字符串与字节切片&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">%s&lt;/td>
&lt;td style="text-align:center">输出字符串表示（string类型或[]byte)&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%s&amp;quot;, []byte(&amp;ldquo;Go语言&amp;rdquo;))&lt;/td>
&lt;td style="text-align:center">Go语言&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%q&lt;/td>
&lt;td style="text-align:center">双引号围绕的字符串，由Go语法安全地转义&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%q&amp;quot;, &amp;ldquo;Go语言&amp;rdquo;)&lt;/td>
&lt;td style="text-align:center">&amp;ldquo;Go语言&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%x&lt;/td>
&lt;td style="text-align:center">十六进制，小写字母，每字节两个字符&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%x&amp;quot;, &amp;ldquo;golang&amp;rdquo;)&lt;/td>
&lt;td style="text-align:center">676f6c616e67&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">%X&lt;/td>
&lt;td style="text-align:center">十六进制，大写字母，每字节两个字符&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%X&amp;quot;, &amp;ldquo;golang&amp;rdquo;)&lt;/td>
&lt;td style="text-align:center">676F6C616E67&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="指针">指针&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">%p&lt;/td>
&lt;td style="text-align:center">十六进制表示，前缀 0x&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%p&amp;quot;, &amp;amp;people)&lt;/td>
&lt;td style="text-align:center">0x4f57f0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="其它标记">其它标记&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">占位符&lt;/th>
&lt;th style="text-align:center">说明&lt;/th>
&lt;th style="text-align:center">举例&lt;/th>
&lt;th style="text-align:center">输出&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">+&lt;/td>
&lt;td style="text-align:center">总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符。&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%+q&amp;quot;, &amp;ldquo;中文&amp;rdquo;)&lt;/td>
&lt;td style="text-align:center">&amp;ldquo;\u4e2d\u6587&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-&lt;/td>
&lt;td style="text-align:center">在右侧而非左侧填充空格（左对齐该区域）&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">#&lt;/td>
&lt;td style="text-align:center">备用格式：为八进制添加前导 0（%#o） 为十六进制添加前导 0x（%#x）或 0X（%#X），为 %p（%#p）去掉前导 0x； 如果可能的话，%q（%#q）会打印原始 （即反引号围绕的）字符串； 如果是可打印字符，%U（%#U）会写出该字符的 Unicode 编码形式（如字符 x 会被打印成 U+0078 &amp;lsquo;x&amp;rsquo;）。&lt;/td>
&lt;td style="text-align:center">Printf(&amp;quot;%#U&amp;quot;, &amp;lsquo;中&amp;rsquo;)&lt;/td>
&lt;td style="text-align:center">U+4E2D&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&amp;rsquo; '&lt;/td>
&lt;td style="text-align:center">(空格)为数值中省略的正负号留出空白（% d）； 以十六进制（% x, % X）打印字符串或切片时，在字节之间用空格隔开&lt;/td>
&lt;td style="text-align:center">无&lt;/td>
&lt;td style="text-align:center">无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">0&lt;/td>
&lt;td style="text-align:center">填充前导的0而非空格；对于数字，这会将填充移到正负号之后&lt;/td>
&lt;td style="text-align:center">无&lt;/td>
&lt;td style="text-align:center">无&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="其他">其他&lt;/h3>
&lt;p>golang没有 &amp;lsquo;%u&amp;rsquo; 点位符，若整数为无符号类型，默认就会被打印成无符号的。&lt;/p>
&lt;p>宽度与精度的控制格式以Unicode码点为单位。宽度为该数值占用区域的最小宽度；精度为小数点之后的位数。
操作数的类型为int时，宽度与精度都可用字符 &amp;lsquo;*&amp;rsquo; 表示。&lt;/p>
&lt;p>对于 %g/%G 而言，精度为所有数字的总数，例如：123.45，%.4g 会打印123.5，（而 %6.2f 会打印123.45）。&lt;/p>
&lt;p>%e 和 %f 的默认精度为6&lt;/p>
&lt;p>对大多数的数值类型而言，宽度为输出的最小字符数，如果必要的话会为已格式化的形式填充空格。&lt;/p>
&lt;p>而以字符串类型，精度为输出的最大字符数，如果必要的话会直接截断。&lt;/p>
&lt;blockquote>
&lt;p>作者：Juha
链接：https://www.jianshu.com/p/66aaf908045e
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。&lt;/p>
&lt;/blockquote>
&lt;h2 id="注释">注释&lt;/h2>
&lt;h2 id="readme">README&lt;/h2>
&lt;h2 id="其他-1">其他&lt;/h2>
&lt;h3 id="断言">断言&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="go基本命令">Go基本命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="k">go&lt;/span> &lt;span class="nx">build&lt;/span> &lt;span class="c1">// 用于打包编译代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">clean&lt;/span> &lt;span class="c1">// 来移除当前源码包和关联源码包里面编译生成的文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">fmt&lt;/span> &lt;span class="c1">// 格式化代码文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">get&lt;/span> &lt;span class="c1">// 下载安装包
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">install&lt;/span> &lt;span class="c1">// 这里就是先生成结果文件，然后把这个文件放到我们的包里面去
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">test&lt;/span> &lt;span class="c1">// 测试文件自动读取源码目录下面名为*_test.go的文件，生成并运行测试用的可执行文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// go提供的一些工具
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">tool&lt;/span> &lt;span class="nx">fix&lt;/span> &lt;span class="c1">//用来修复以前老版本的代码到新版本
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">tool&lt;/span> &lt;span class="nx">vet&lt;/span> &lt;span class="nx">directory&lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="nx">files&lt;/span> &lt;span class="c1">//用来分析当前目录的代码是否都是正确的代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 用于在编译前自动化生成某类代码。go generate和go build是完全不一样的命令，通过分析源码中特殊的注释，然后执行相应的命令。这些命令都是很明确的，没有任何的依赖在里面。而且大家在用这个之前心里面一定要有一个理念，这个go generate是给你用的，不是给使用你这个包的人用的，是方便你来生成一些代码的。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">generate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">go&lt;/span> &lt;span class="nx">doc&lt;/span> &lt;span class="c1">// 生成文档
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">version&lt;/span> &lt;span class="c1">//查看go当前的版本
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">env&lt;/span> &lt;span class="c1">//查看当前go的环境变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">list&lt;/span> &lt;span class="c1">//列出当前全部安装的package
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">run&lt;/span> &lt;span class="c1">//编译并运行Go程序
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="go-mod-相关命令">Go mod 相关命令&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="k">go&lt;/span> &lt;span class="nx">mod&lt;/span> &lt;span class="nx">init&lt;/span> &lt;span class="nx">example&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">com&lt;/span> &lt;span class="c1">//生成go.mod文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">mod&lt;/span> &lt;span class="nx">download&lt;/span> &lt;span class="c1">//下载go.mod文件中知名的所有依赖
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">mod&lt;/span> &lt;span class="nx">tidy&lt;/span> &lt;span class="c1">//整理现有的依赖，删除未使用的依赖
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">mod&lt;/span> &lt;span class="nx">graph&lt;/span> &lt;span class="c1">//查看现有的依赖结构
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">mod&lt;/span> &lt;span class="nx">edit&lt;/span> &lt;span class="c1">// 编辑go.mod文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">mod&lt;/span> &lt;span class="nx">vendor&lt;/span> &lt;span class="c1">//到处现有的所有依赖 (事实上 Go modules 正在淡化 Vendor 的概念)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">mod&lt;/span> &lt;span class="nx">verify&lt;/span> &lt;span class="c1">//校验一个模块是否被篡改过
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">clean&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">modcache&lt;/span> &lt;span class="c1">//清理所有已缓存的模块版本数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">mod&lt;/span> &lt;span class="c1">//查看所有go mod的使用命令
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">go&lt;/span> &lt;span class="nx">mod&lt;/span> &lt;span class="nx">why&lt;/span> &lt;span class="c1">//explain why packages or modules are needed
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="未完待续">未完待续。。。&lt;/h2>
&lt;h2 id="参考文献">参考文献&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.jianshu.com/p/66aaf908045e" target="_blank" rel="noopener"
>https://www.jianshu.com/p/66aaf908045e&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>